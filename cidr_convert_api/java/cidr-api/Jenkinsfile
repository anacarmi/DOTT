pipeline {
	agent any 
		stages {
			stage('Build') {  
				steps {
					dir("cidr_convert_api/java/cidr-api") {
							script { 
								sh 'mvn package -Dmaven.test.skip=true'   // build your Java application maven skipping the tests
							}
					}	
				}
			} 
			
			stage('Testing') { 
				steps {
					dir("cidr_convert_api/java/cidr-api") { 	
					   script {
						try {
							sh 'mvn test'         // try/catch for skipping the failing tests and keep going with pipeline
   						} catch (Exception e) {
      							echo 'There is an error with tests: ' + e.toString()	
  						}
						sh 'cat target/surefire-reports/TEST-*.xml'	 //shows the report file
					   }
					}
				}
			}

			stage('Code Analysis: SonarCloud') {     
				steps {
					dir("cidr_convert_api/java/cidr-api/") {
						withSonarQubeEnv('SonarCloud') {        // the connection between my jenkins and sonar thru maven
							sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar' 
							sh 'sonar.coverage.jacoco.xmlReportPaths="target/surefire-reports/TEST-*.xml"'
						}
					}
					
					sh 'echo "wait a little bit..."' 
					
					timeout(time: 1, unit: 'HOURS') {
                				waitForQualityGate abortPipeline: true     // if QG says fail, then the pipeline stops
              				}		
				}
			} 
			
			stage('Code Analysis: Linting') {        
				steps {
					dir("cidr_convert_api/java/cidr-api/") {
				        sh 'mvn pmd:pmd' }    				 // maven runs the 'programming mistake detector' to find mistakes in code
					dir("cidr_convert_api/java/cidr-api/target") {    
					sh 'cat pmd.xml'				 // taking a look at the report that pmd does about my code
					}
				}
			}
			 
			stage('Deploy Code') {
				steps {
					dir("cidr_convert_api/java/cidr-api/"){
						script{
							sh 'chmod +x start.sh'
  							sh './start.sh'            // running the app: this file executes the app in the background
						}
					}
				}
			} 
		}  
} 
